<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		  focusEnabled="true"
		   initialize="init()" creationComplete="handleCreationComplete()"
		   width="{ _parentWidth }">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Metadata>
		[Event(name="menuHide",type="mx.events.MenuEvent")]
		[Event(name="menuShow",type="mx.events.MenuEvent")]
		[Event(name="itemClick",type="mx.events.MenuEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.controls.Button;
			import mx.controls.Menu;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.MenuEvent;
			import mx.events.MoveEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			
			import spark.filters.DropShadowFilter;
			import spark.filters.GlowFilter;
			
			public static const TOP_PADDING:int = 1;
			public static const RIGHT_PADDING:int = 3;
			public static const NUB_WIDTH:int = 100;
			public static const RADIUS:int = 5;
			public static const MENU_PADDING:int = 3;
			
			private var _menu:Menu ;
			private var _button:Button;
			private var _dataProvider:Object;
			
			[Bindable]
			private var _parentWidth:int;
			private var _rowHeight:int;
			private var _lang:String ;
			
			private function init():void
			{
				addEventListener( MoveEvent.MOVE, handleMove, false, 0, true );
				
				if (systemManager)
				{
					systemManager.addEventListener( ResizeEvent.RESIZE, handleResize, false, 0, true );
				}
				
				var localPoint:Point = new Point( 0, 0 );
				var globalPoint:Point = localToGlobal( localPoint ); 
				_lang = FlexGlobals.topLevelApplication.langCombo.selectedItem.localeChain.item.toString() ;
				
				
				_menu = new Menu();
				_menu =	Menu.createMenu( this, _dataProvider, false );	
				switch(_lang)
				{
					case("en_US"):						
						_menu.labelField="@label";
						break;
					case("ar_EG"):
						_menu.labelField="@label_ar";						
						break
				}
				
				_menu.styleName = "dropDownMDIWindow";
				//_menu.setStyle( "openDuration", 20 );
				/* _menu.setStyle( "dropShadowEnabled", false ); */
				//_menu.setStyle( "borderStyle", "none" );
				/* _menu.setStyle( "borderVisible",false); */
				/* _menu.setStyle( "dropShadowVisible",false); */
				/* _menu.setStyle( "contentBackgroundAlpha",0); */ 
				
				_menu.addEventListener( MenuEvent.MENU_HIDE, handleMenuHide );
				_menu.addEventListener( MenuEvent.MENU_SHOW, handleMenuShow );
				_menu.addEventListener( MenuEvent.ITEM_CLICK, handleItemClick );
				
				
				_menu.show( -1000, -1000 );
				
				
			}
			
			private function handleMenuHide( event:MenuEvent ):void
			{
				if (event.menu == _menu)
				{
					PopUpManager.removePopUp( this );
				}
				
				dispatchEvent( event );
			}
			
			private function handleMenuShow( event:MenuEvent ):void
			{
				dispatchEvent( event );
			}
			
			private function handleItemClick( event:MenuEvent ):void
			{
				dispatchEvent( event );
				
			}
			
			private function getMenuPosition():Point
			{
				var localPoint:Point = new Point( 0, 0 );
				var globalPoint:Point = localToGlobal( localPoint ); 
				
				var x:int = globalPoint.x + (_parentWidth - _menu.width - RIGHT_PADDING);
				var y:int = globalPoint.y + _rowHeight + MENU_PADDING + TOP_PADDING;
				
				return new Point( x, y );
			}
			
			private function positionMenu():void
			{
				var point:Point = getMenuPosition();
				_menu.move( point.x, point.y );				
			}
			
			private function handleMove( event:Event ):void
			{
				callLater( positionMenu );		
			}
			
			private function handleResize( event:Event ):void
			{
				callLater( positionMenu );
			}
			
			public function set dataProvider( value:Object ):void
			{
				_dataProvider = value;
			}
			
			public function set parentWidth( value:int ):void
			{
				_parentWidth = value;
			}
			
			public function set rowHeight( value:int ):void
			{
				_rowHeight = value;
			}			
			
			public function highlightFirstRow():void
			{
				_menu.selectedIndex = 0;
			}
			
			public function get dropMenu():Menu
			{
				return _menu ;
			}
			
			private function drawShape( g:Graphics, width:int, height:int, point:Point, radius:int ):void
			{
				
				g.moveTo( 0, radius);
				
				g.lineTo( 0, height - radius );
				g.curveTo( 0, height, radius, height );
				
				g.lineTo( width - radius, height );
				g.curveTo( width, height, width, height - radius );
				
				g.lineTo( width, point.y+radius );
				g.curveTo( width, point.y, width-radius , point.y);
				
				g.lineTo( point.x, point.y );
				g.curveTo((point.x) - radius , point.y, (point.x) - radius, point.y - radius );
				
				g.lineTo( point.x-radius,radius );
				g.curveTo(  (point.x)-radius, radius, (point.x) - radius ,0 );
				
				g.lineTo(  radius, 0 );
				g.curveTo(0, 0, 0, radius ); 
				
			
				
			}
			
			private function handleCreationComplete():void
			{
				var comp:UIComponent = new UIComponent();
				var mask:Shape = new Shape();
				var g:Graphics;
				
				g = mask.graphics;
				g.clear();
				g.beginFill(0x000000,1.0);
				g.lineStyle(0, 0xFF0000);
				
				var height:int = _rowHeight + (MENU_PADDING * 2) + _menu.height;
				var point:Point = new Point( _menu.width - NUB_WIDTH, _rowHeight );								
				
				drawShape( g, _menu.width, height, point, RADIUS );
				g.endFill();
				
				mask.x = _parentWidth - _menu.width - RIGHT_PADDING ;
				mask.y = TOP_PADDING;
				
				comp.addChild( mask );
				addChild( comp );
				
				this.height = height + MENU_PADDING; 
				this.mask = comp; 		
				
				var ds:spark.filters.DropShadowFilter = new DropShadowFilter();
				ds.distance = 1;
				ds.blurX = 5;
				ds.blurY = 5;
				ds.alpha = .5;
				
				var gf:spark.filters.GlowFilter = new GlowFilter();
				gf.color = 0x000000;
				gf.alpha = .3;
				gf.blurX = 3;
				gf.blurY = 3;
				gf.quality = 1;
				gf.strength = 1;
				
				this.filters = [gf, ds];				
			}
		]]>
	</fx:Script>
</mx:Canvas>
