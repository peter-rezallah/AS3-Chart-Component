<?xml version="1.0" encoding="utf-8"?>
<mx:UIComponent xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" addedToStage="added()" resize="this.resize()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import charts.Factory;
			import charts.ObjectCollection;
			import charts.series.Element;
			import charts.series.has_tooltip;
			
			import com.adobe.images.JPGEncoder;
			import com.adobe.images.PNGEncoder;
			import com.serialization.json.JSON;
			
			import elements.Background;
			import elements.axis.RadarAxis;
			import elements.axis.XAxis;
			import elements.axis.XAxisLabels;
			import elements.axis.YAxisBase;
			import elements.axis.YAxisLeft;
			import elements.axis.YAxisRight;
			import elements.labels.ChartLegends;
			import elements.labels.CloseImageContainer;
			import elements.labels.Keys;
			import elements.labels.XLegend;
			import elements.labels.YLegendBase;
			import elements.labels.YLegendLeft;
			import elements.labels.YLegendRight;
			import elements.menu.Menu;
			
			import flash.display.BitmapData;
			import flash.display.LoaderInfo;
			import flash.display.Sprite;
			import flash.display.StageAlign;
			import flash.display.StageScaleMode;
			import flash.events.ContextMenuEvent;
			import flash.events.Event;
			import flash.events.IOErrorEvent;
			import flash.events.MouseEvent;
			import flash.events.ProgressEvent;
			import flash.external.ExternalInterface;
			import flash.net.URLLoader;
			import flash.net.URLLoaderDataFormat;
			import flash.net.URLRequest;
			import flash.net.URLRequestHeader;
			import flash.net.URLRequestMethod;
			import flash.net.URLVariables;
			import flash.system.System;
			import flash.ui.ContextMenu;
			import flash.ui.ContextMenuItem;
			import flash.utils.ByteArray;
			
			import global.Global;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.ResizeEvent;
			import mx.utils.Base64Encoder;
			
			import sigma.crossHair.CrossHair;
			import sigma.customeEvents.StudyPaneDeleted;
			
			import spark.components.Button;
			
			import string.Utils;
			
			
			public  var VERSION:String = "2 Lug Wyrm Charmer";
			private var title:ChartLegends = null; 
			//private var x_labels:XAxisLabels;
			private var x_axis:XAxis;
			private var radar_axis:RadarAxis;
			private var x_legend:XLegend;
			private var y_axis:YAxisBase;
			private var y_axis_right:YAxisBase;
			private var y_legend:YLegendBase;
			private var y_legend_2:YLegendBase;
			private var keys:Keys;
			private var obs:ObjectCollection;
			public var tool_tip_wrapper:String;
			private var sc:ScreenCoords;
			private var tooltip:Tooltip;
			private var background:Background;
			private var menu:Menu;
			private var ok:Boolean;
			private var URL:String;		// ugh, vile. The IOError doesn't report the URL
		
			private var chart_parameters:Object = new Object();
			private var json:String;
			private var _values:Object ;
			private var volumeChart:Boolean = false ;
			private var _crossHair:CrossHair ;
			
			
			public function added():void
			{		
				
				build_right_click_menu();
				this.ok = false;
				/* dispatchEvent(new ResizeEvent(ResizeEvent.RESIZE)); */
				//if(_values != null )this.build_chart(_values);
				 
			
			}	
			
			
			private function load_external_file( file:String ):void {
				
				this.URL = file;
				//
				// LOAD THE DATA
				//
				var loader:URLLoader = new URLLoader();
				loader.addEventListener( IOErrorEvent.IO_ERROR, ioError );
				loader.addEventListener( Event.COMPLETE, xmlLoaded );
				
				var request:URLRequest = new URLRequest(file);
				loader.load(request);
			}
			
			private function ioError( e:IOErrorEvent ):void {
				
				// remove the 'loading data...' msg:
				this.removeChildAt(0);
				var msg:ErrorMsg = new ErrorMsg( 'Open Flash Chart\nIO ERROR\nLoading test data\n' + e.text );
				msg.add_html( 'This is the URL that I tried to open:<br><a href="'+this.URL+'">'+this.URL+'</a>' );
				this.addChild( msg );
			}
			
			private function show_error( msg:String ):void {
				
				// remove the 'loading data...' msg:
				this.removeChildAt(0);
				
				var m:ErrorMsg = new ErrorMsg( msg );
				//m.add_html( 'Click here to open your JSON file: <a href="http://a.com">asd</a>' );
				this.addChild(m);
			}
			
			private function mouseMove( event:Event ):void {
				// tr.ace( 'over ' + event.target );
				// tr.ace('move ' + Math.random().toString());
				// tr.ace( this.tooltip.get_tip_style() );
				
				if ( !this.tooltip )
					return;		// <- an error and the JSON was not loaded
				
				switch( this.tooltip.get_tip_style() ) {
					case Tooltip.CLOSEST:
						this.mouse_move_closest( event );
						break;
					
					case Tooltip.PROXIMITY:
						this.mouse_move_proximity( event as MouseEvent );
						break;
					
					case Tooltip.NORMAL:
						this.mouse_move_follow( event as MouseEvent );
						break;
					
				}
			}
			
			private function mouse_move_follow( event:MouseEvent ):void {
				
				// tr.ace( event.currentTarget );
				// tr.ace( event.target );
				
				if ( event.target is has_tooltip )
					this.tooltip.draw( event.target as has_tooltip );
				else
					this.tooltip.hide();
			}
			
			private function mouse_move_proximity( event:MouseEvent ):void {
				
				//tr.ace( event.currentTarget );
				//tr.ace( event.target );
				
				var elements:Array = this.obs.mouse_move_proximity( this.mouseX, this.mouseY );
				this.tooltip.closest( elements );
			}
			
			private function mouse_move_closest( event:Event ):void {
				
				//var elements:Array = this.obs.closest_2( this.mouseX, this.mouseY );
				//this.tooltip.closest( elements );
				//_crossHair.closest( elements );
				FlexGlobals.topLevelApplication.dispatchMouseMoveEventToMain(mouseX,mouseY);
				FlexGlobals.topLevelApplication.dispatchMouseMoveEvent(mouseX,mouseY);
				
				var minus:int = 0 ;				
				
				for(var i:int = 0 ; i < _values.elements.length ; i++ )
				{
					
					
					if(_values.elements[i].hasOwnProperty('text'))
					{
						var elements:Array = this.obs.closest_2_toSpecificDataSet( mouseX, mouseY , i );
						//tooltip.closest( elements );
						if( i == 0 ) _crossHair.closest( elements );
						setChartLegendTips(elements , i - minus );
					}
					else{
						
						minus ++ ;
					}
				}
				
			}
			
			public function sendMouseXYToPane(x:Number , y:Number):void
			{
				var minus:int = 0 ;
				
				for(var i:int = 0 ; i < _values.elements.length ; i++ )
				{				
					if(_values.elements[i].hasOwnProperty('text'))
					{
						var elements:Array = this.obs.closest_2_toSpecificDataSet( mouseX, mouseY , i );
						//tooltip.closest( elements );
						if( i == 0 ) _crossHair.closest( elements );
						setChartLegendTips(elements , i - minus );
					}else{
						
						minus ++ ;
					}
					
				}
			}
			
			private function setChartLegendTips(elements:Array , index:int ):void
			{
				var k:int = ( keys.numChildren - 1 )
				for each ( var e:has_tooltip in elements ) {
					
					var tt:String = e.get_tooltip();
					var lines:Array = tt.split( '<br>' );
					
					//title.timeLabel.text = lines[1];
					keys.timeLabel.text = "GMT+2 : " + lines[1];	
					
					keys.getkeyAt(index).text = lines[0] ;
					keys.getkeyAt(index).setTextFormat(keys.getKeyColorAt(index));
				}
				//title.timeLabel.text =  
			}
			
			private function activateHandler(event:Event):void {
				tr.aces("activateHandler:", event);
				tr.aces("stage", this.stage);
			}
			
			private function resizeHandler(event:Event):void {
				// tr.ace("resizeHandler: " + event);
				this.resize();
			}
			
			//
			// pie charts are simpler to resize, they don't
			// have all the extras (X,Y axis, legends etc..)
			//
			private function resize_pie(): ScreenCoordsBase {
				
				// should this be here?
				this.addEventListener(MouseEvent.MOUSE_MOVE, this.mouseMove);
				
				this.background.resize();
				 this.title.resize(width); 
				
				// this object is used in the mouseMove method
				this.sc = new ScreenCoords(
					this.title.get_height(), 0, this.stage.stageWidth, this.stage.stageHeight,
					null, null, null, 0, 0, false );
				this.obs.resize( sc );
				
				return sc;
			}
			
			//
			//
			private function resize_radar(): ScreenCoordsBase {
				
				this.addEventListener(MouseEvent.MOUSE_MOVE, this.mouseMove);
				
				this.background.resize();
				this.title.resize(width); 
				this.keys.resize( 0, this.title.get_height() );
				
				var top:Number = this.title.get_height() + this.keys.get_height();
				
				// this object is used in the mouseMove method
				var sc:ScreenCoordsRadar = new ScreenCoordsRadar(top, 0, this.stage.stageWidth, this.stage.stageHeight);
				
				sc.set_range( this.radar_axis.get_range() );
				// 0-4 = 5 spokes
				sc.set_angles( this.obs.get_max_x()-this.obs.get_min_x()+1 );
				
				// resize the axis first because they may
				// change the radius (to fit the labels on screen)
				this.radar_axis.resize( sc );
				this.obs.resize( sc );
				
				return sc;
			}
			
			private function resize():void {
				//
				// the chart is async, so we may get this
				// event before the chart has loaded, or has
				// partly loaded
				//
				if ( !this.ok )
					return;			// <-- something is wrong
				
				var sc:ScreenCoordsBase;
				
				if ( this.radar_axis != null )
					sc = this.resize_radar();
				else if ( this.obs.has_pie() )
					sc = this.resize_pie();
				else
					sc = this.resize_chart();
				
				if( this.menu )
					this.menu.resize();
				
				// tell the web page that we have resized our content
				if( this.chart_parameters['id'] )
					this.callExternalCallback("ofc_resize", sc.left, sc.width, sc.top, sc.height, this.chart_parameters['id']);
				else
					this.callExternalCallback("ofc_resize", sc.left, sc.width, sc.top, sc.height);
				
				sc = null;
			}
			
			public function resize_chart(): ScreenCoordsBase {
				//
				// we want to show the tooltip closest to
				// items near the mouse, so hook into the
				// mouse move event:
				//
				this.addEventListener(MouseEvent.MOUSE_MOVE, this.mouseMove);
				
				// FlashConnect.trace("stageWidth: " + stage.stageWidth + " stageHeight: " + stage.stageHeight);
				this.background.resize();
				this.title.resize(width); 
				
				
				var left:Number   = this.y_legend.get_width() /*+ this.y_labels.get_width()*/ + this.y_axis.get_width();
				
				this.keys.resize( left, this.title.get_height() );
				
				var top:Number = this.title.get_height() + this.keys.get_height();
				
				//var bottom:Number = this.stage.stageHeight;
				var bottom:Number = this.height;
				bottom -= (this.x_legend.get_height() + this.x_axis.get_height());
				
				//var right:Number = this.stage.stageWidth;
				var right:Number = this.width;
				right -= this.y_legend_2.get_width();
				//right -= this.y_labels_right.get_width();
				right -= this.y_axis_right.get_width();
				
				// this object is used in the mouseMove method
				this.sc = new ScreenCoords(
					top, left, right, bottom,
					this.y_axis.get_range(),
					this.y_axis_right.get_range(),
					this.x_axis.get_range(),
					this.x_axis.first_label_width(),
					this.x_axis.last_label_width(),
					false );
				
				this.sc.set_bar_groups(this.obs.groups);
				_crossHair.resize( sc ) ;
				
				this.x_axis.resize( sc,	bottom + this.x_legend.get_height()+3 );
				this.y_axis.resize( this.y_legend.get_width(), sc );
				this.y_axis_right.resize( 0, sc );
				this.x_legend.resize( sc );
				this.y_legend.resize();
				this.y_legend_2.resize();
				
				this.obs.resize( sc );
				
				
				// Test code:
				this.dispatchEvent(new Event("on-show"));
				
				
				return sc;
			}
			
			private function mouseOut(event:Event):void 
			{
				
				if( this.tooltip != null )
					this.tooltip.hide();
				
				if( this.obs != null )
					this.obs.mouse_out();
			}
			
			
			
			private function xmlLoaded(event:Event):void {
				var loader:URLLoader = URLLoader(event.target);
				this.parse_json( loader.data );
			}
			
			//
			// we have data! parse it and make the chart
			//
			private function parse_json( json_string:String ):void {
				
				// tr.ace(json_string);
				
				var ok:Boolean = false;
				
				try {
					var json:Object = JSON.deserialize( json_string );
					ok = true;
				}
				catch (e:Error) {
					// remove the 'loading data...' msg:
					this.removeChildAt(0);
					this.addChild( new JsonErrorMsg( json_string as String, e ) );
				}
				
				//
				// don't catch these errors:
				//
				if( ok )
				{
					// remove 'loading data...' msg:
					this.removeChildAt(0);
					this.build_chart( _values );
					
					// force this to be garbage collected
					json = null;
				}
				
				json_string = '';
			}
			
			public function build_chart( json:Object ):void {
				
				tr.ace('----');
				tr.ace(JSON.serialize(json));
				tr.ace('----');
				
				if ( this.obs != null )
					this.die();
				
				// init singletons:
				NumberFormat.getInstance( json );
				NumberFormat.getInstanceY2( json );
				
				this.tooltip	= new Tooltip( json.tooltip )
				
				var g:Global = Global.getInstance();
				g.set_tooltip_string( this.tooltip.tip_text );
				
				//
				// these are common to both X Y charts and PIE charts:
				this.background	= new Background( json );
				this.title		= new ChartLegends( json.title ); 
				//
				this.addChild( this.background );
				//
				
				if ( JsonInspector.is_radar( json ) ) {
					
					this.obs = Factory.MakeChart( json );
					this.radar_axis = new RadarAxis( json.radar_axis );
					this.keys = new Keys( this.obs , null , true );
					
					this.addChild( this.radar_axis );
					this.addChild( this.keys );
					
				}
				else if ( !JsonInspector.has_pie_chart( json ) )
				{
					this.build_chart_background( json );
				}
				else
				{
					// this is a PIE chart
					this.obs = Factory.MakeChart( json );
					// PIE charts default to FOLLOW tooltips
					this.tooltip.set_tip_style( Tooltip.NORMAL );
				}
				
				// these are added in the Flash Z Axis order
				this.addChild( this.title ); 
				if(title != null)
				{
					//trace("close button done");
					title.closeButton.addEventListener(MouseEvent.CLICK , handleDie ) ;
				}
				for each( var set:Sprite in this.obs.sets )
				this.addChild( set );
				this.addChild( this.tooltip );
				
				_crossHair = new CrossHair(tooltip.x , tooltip.y , width , height );
				addChild(_crossHair);
				
				if (json['menu'] != null) {
					this.menu = new Menu('99', json['menu']);
					this.addChild(this.menu);
				}
				
				this.ok = true;
				this.resize();
				
				
				
			}
			
			public function build_chart_updates( json:Object ):void {
				
				/* tr.ace('----');
				tr.ace(JSON.serialize(json));
				tr.ace('----');
				
				if ( this.obs != null )
					this.die();
				
				// init singletons:
				NumberFormat.getInstance( json );
				NumberFormat.getInstanceY2( json );
				
				this.tooltip	= new Tooltip( json.tooltip )
				
				var g:Global = Global.getInstance();
				g.set_tooltip_string( this.tooltip.tip_text );
				
				//
				// these are common to both X Y charts and PIE charts:
				this.background	= new Background( json );
				this.title		= new Title( json.title );
				//
				this.addChild( this.background ); */
				//
				
				if ( JsonInspector.is_radar( json ) ) {
					
					this.obs = Factory.MakeChart( json );
					this.radar_axis = new RadarAxis( json.radar_axis );
					this.keys = new Keys( this.obs , null , true );
					
					this.addChild( this.radar_axis );
					this.addChild( this.keys );
					
				}
				else if ( !JsonInspector.has_pie_chart( json ) )
				{
					//this.build_chart_background( json );
					this.obs = Factory.MakeChart( json );
				}
				else
				{
					// this is a PIE chart
					this.obs = Factory.MakeChart( json );
					// PIE charts default to FOLLOW tooltips
					this.tooltip.set_tip_style( Tooltip.NORMAL );
				}
				
				// these are added in the Flash Z Axis order
				//this.addChild( this.title );
				for each( var set:Sprite in this.obs.sets )
				this.addChild( set );
				//this.addChild( this.tooltip );
				
				/* if (json['menu'] != null) {
					this.menu = new Menu('99', json['menu']);
					this.addChild(this.menu);
				} */
				
				this.ok = true;
				this.resize();
				
				
				
			}
			
			//
			// PIE charts don't have this.
			// build grid, axis, legends and key
			//
			private function build_chart_background( json:Object ):void {
				
				//trace("JsonInspector.has_pie_chart( json )"+JsonInspector.has_pie_chart( json ));
				//
				// This reads all the 'elements' of the chart
				// e.g. bars and lines, then creates them as sprites
				//
				this.obs			= Factory.MakeChart( json );
				//
				this.x_legend		= new XLegend( json.x_legend );			
				this.y_legend		= new YLegendLeft( json );
				this.y_legend_2		= new YLegendRight( json );
				this.x_axis			= new XAxis( json, this.obs.get_min_x(), this.obs.get_max_x() );
				this.y_axis			= new YAxisLeft();
				this.y_axis_right	= new YAxisRight();
				
				// access all our globals through this:
				var g:Global = Global.getInstance();
				// this is needed by all the elements tooltip
				g.x_labels = this.x_axis.labels;
				g.x_legend = this.x_legend;
				
				//
				// pick up X Axis labels for the tooltips
				// 
				this.obs.tooltip_replace_labels( this.x_axis.labels );
				//
				//
				//
				
				this.keys = new Keys( this.obs , null , true );
				
				this.addChild( this.x_legend );
				this.addChild( this.y_legend );
				this.addChild( this.y_legend_2 );
				this.addChild( this.y_axis );
				this.addChild( this.y_axis_right );
				this.addChild( this.x_axis );
				this.addChild( this.keys );
				
				// now these children have access to the stage,
				// tell them to init
				this.y_axis.init(json);
				this.y_axis_right.init(json);
				
					
			}
			
			private function handleDie(e:MouseEvent):void
			{
				FlexGlobals.topLevelApplication.dispatchEvent(new StudyPaneDeleted(StudyPaneDeleted.STUDY_PANE_REMOVED , e.target.parent.owner.studyName )) ;
			}
			
			/**
			 * Remove all our referenced objects
			 */
			public function die():void
			{				
				this.obs.die();
				this.obs = null;
				
				if ( this.tooltip != null ) this.tooltip.die();
				if ( this._crossHair != null ) this._crossHair.die();
				if ( this.x_legend != null )	this.x_legend.die();
				if ( this.y_legend != null )	this.y_legend.die();
				if ( this.y_legend_2 != null )	this.y_legend_2.die();
				if ( this.y_axis != null )		this.y_axis.die();
				if ( this.y_axis_right != null ) this.y_axis_right.die();
				if ( this.x_axis != null )		this.x_axis.die();
				if ( this.keys != null )		this.keys.die();
				if ( this.title != null )		this.title.die(); 
				if ( this.radar_axis != null )	this.radar_axis.die();
				if ( this.background != null )	this.background.die();
				
				this.tooltip = null;
				this._crossHair = null ;
				this.x_legend = null;
				this.y_legend = null;
				this.y_legend_2 = null;
				this.y_axis = null;
				this.y_axis_right = null;
				this.x_axis = null;
				this.keys = null;
				this.title = null; 
				this.radar_axis = null;
				this.background = null;
				
				while ( this.numChildren > 0 )
					this.removeChildAt(0);
				
				if ( this.hasEventListener(MouseEvent.MOUSE_MOVE))
					this.removeEventListener(MouseEvent.MOUSE_MOVE, this.mouseMove);
				
				// do not force a garbage collection, it is not supported:
				// http://stackoverflow.com/questions/192373/force-garbage-collection-in-as3
				
			}
			
			
			public function addVolumeChart():void
			{
				volumeChart = true ;
			}
			
			private function addCallback(functionName:String, closure:Function): void 
			{
				
				// the debug player does not have an external interface
				// because it is NOT embedded in a browser
				if (ExternalInterface.available)
					ExternalInterface.addCallback(functionName, closure);
				
			}
			
			private function callExternalCallback(functionName:String, ... optionalArgs ): * 
			{
				
				// the debug player does not have an external interface
				// because it is NOT embedded in a browser
				if (ExternalInterface.available)
					return ExternalInterface.call(functionName, optionalArgs);
				
			}
			
			
			public function getVersion():String {return VERSION;}
			
			// public function getImgBinary():String { return Base64.encodeByteArray(image_binary()); }
			public function getImgBinary():String {
				
				tr.ace('Saving image :: image_binary()');
				
				var bmp:BitmapData = new BitmapData(this.stage.stageWidth, this.stage.stageHeight);
				bmp.draw(this);
				
				var b64:Base64Encoder = new Base64Encoder();
				
				var b:ByteArray = PNGEncoder.encode(bmp);
				
				// var encoder:JPGEncoder = new JPGEncoder(80);
				// var q:ByteArray = encoder.encode(bmp);
				// b64.encodeBytes(q);
				
				//
				//
				//
				b64.encodeBytes(b);
				return b64.toString();
				//
				// commented out by J vander? why?
				// return b64.flush();
				//
				//
				
				
				/*
				var b64:Base64Encoder = new Base64Encoder();
				b64.encodeBytes(image_binary());
				tr.ace( b64 as String );
				return b64 as String;
				*/
			}
			
			
			/**
			 * Called from the context menu:
			 */
			public function saveImage(e:ContextMenuEvent):void {
				// ExternalInterface.call("save_image", this.chart_parameters['id']);// , getImgBinary());
				// ExternalInterface.call("save_image", getImgBinary());
				
				// this just calls the javascript function which will grab an image from use
				// an do something with it.
				this.callExternalCallback("save_image", this.chart_parameters['id']);
			}
			
			
			private function image_binary() : ByteArray {
				tr.ace('Saving image :: image_binary()');
				
				var pngSource:BitmapData = new BitmapData(this.width, this.height);
				pngSource.draw(this);
				return PNGEncoder.encode(pngSource);
			}
			
			//
			// External interface called by Javascript to
			// save the flash as an image, then POST it to a URL
			//
			//public function post_image(url:String, post_params:Object, callback:String, debug:Boolean):void {
			public function post_image(url:String, callback:String, debug:Boolean):void {
				
				var header:URLRequestHeader = new URLRequestHeader("Content-type", "application/octet-stream");
				
				//Make sure to use the correct path to jpg_encoder_download.php
				var request:URLRequest = new URLRequest(url);
				
				request.requestHeaders.push(header);
				request.method = URLRequestMethod.POST;
				//
				request.data = image_binary();
				
				var loader:URLLoader = new URLLoader();
				loader.dataFormat = URLLoaderDataFormat.VARIABLES;
				
				/*
				* i can't figure out how to make these work
				* 
				var urlVars:URLVariables = new URLVariables();
				for (var key:String in post_params) {
				urlVars[key] = post_params[key];
				}
				*/
				// base64:
				// urlVars.b64_image_data =  getImgBinary();
				// RAW:
				// urlVars.b64_image_data = image_binary();
				
				// request.data = urlVars;
				
				var id:String = '';
				if ( this.chart_parameters['id'] )
					id = this.chart_parameters['id'];
				
				if( debug )
				{
					// debug the PHP:
					flash.net.navigateToURL(request, "_blank");
				}
				else
				{
					//we have to use the PROGRESS event instead of the COMPLETE event due to a bug in flash
					loader.addEventListener(ProgressEvent.PROGRESS, function (e:ProgressEvent):void {
						
						tr.ace("progress:" + e.bytesLoaded + ", total: " + e.bytesTotal);
						if ((e.bytesLoaded == e.bytesTotal) && (callback != null)) {
							tr.aces('Calling: ', callback + '(' + id + ')'); 
							this.call(callback, id);
						}
					});
					
					try {
						loader.load( request );
					} catch (error:Error) {
						tr.ace("unable to load:" + error);
					}
					
					/*
					var loader:URLLoader = new URLLoader();
					loader.dataFormat = URLLoaderDataFormat.BINARY;
					loader.addEventListener(Event.COMPLETE, function(e:Event):void {
					tr.ace('Saved image to:');
					tr.ace( url );
					//
					// when the upload has finished call the user
					// defined javascript function/method
					//
					ExternalInterface.call(callback);
					});
					
					loader.load( jpgURLRequest );
					*/
				}
			}
			
			private function build_right_click_menu(): void {
				
				/* var cm:ContextMenu = new ContextMenu();
				cm.addEventListener(ContextMenuEvent.MENU_SELECT, onContextMenuHandler);
				cm.hideBuiltInItems();
				
				// OFC CREDITS
				var fs:ContextMenuItem = new ContextMenuItem("Charts by Open Flash Chart [Version "+VERSION+"]" );
				fs.addEventListener(
					ContextMenuEvent.MENU_ITEM_SELECT,
					function doSomething(e:ContextMenuEvent):void {
						var url:String = "http://teethgrinder.co.uk/open-flash-chart-2/";
						var request:URLRequest = new URLRequest(url);
						flash.net.navigateToURL(request, '_blank');
					});
				cm.customItems.push( fs );
				
				var save_image_message:String = ( this.chart_parameters['save_image_message'] ) ? this.chart_parameters['save_image_message'] : 'Save Image Locally';
				
				var dl:ContextMenuItem = new ContextMenuItem(save_image_message);
				dl.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, this.saveImage);
				cm.customItems.push( dl );
				
				this.contextMenu = cm; */
			}
			
			private function onContextMenuHandler(event:ContextMenuEvent):void
			{
			}
			
			public function set values(val:Object):void
			{
				_values = val ;
			}
			
			public function get values():Object
			{
				return _values ;
			}
			
			public function get chartLegends():CloseImageContainer
			{
				return title.closeButton
			}
			
		]]>
		
	</fx:Script>
</mx:UIComponent>